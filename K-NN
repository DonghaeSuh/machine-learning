{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "기계학습20210927",
      "private_outputs": true,
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyM2WOCmS89/3KmSd8ZexAaN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DonghaeSuh/machine-learning/blob/main/K-NN\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lnZ7g7I8NRQG"
      },
      "source": [
        "import matplotlib.pyplot as plt \n",
        "import numpy as np\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn import metrics\n",
        "\n",
        "dach_length = [77,78,85,83,73,77,73,80]\n",
        "dach_height = [25,28,29,30,21,22,17,35]\n",
        "\n",
        "samo_length = [75,77,86,86,79,83,83,88]\n",
        "samo_height = [56,57,50,53,60,53,49,61]\n",
        "\n",
        "plt.scatter(dach_length ,dach_height, c='red',label='Dcahshund')\n",
        "plt.scatter(samo_length,samo_height, c='blue',label='Samoyed')\n",
        "plt.xlabel('Length')\n",
        "plt.ylabel('Height')\n",
        "plt.title('Dog size')\n",
        "plt.legend(loc='best') #범례가 어디있을지는 best : 알아서 해라, 원하는 위치 쓰면 됨\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-eyQU4XNVqDZ"
      },
      "source": [
        "new_length =[79]\n",
        "new_height =[35]\n",
        "\n",
        "plt.scatter(new_length,new_height, s=100, marker='p',c='green',label='new data')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ph9PEENJWRxP"
      },
      "source": [
        "#학습 데이터 준비\n",
        "\n",
        "d_data= np.column_stack((dach_length,dach_height))\n",
        "print(d_data)\n",
        "d_label=np.zeros(len(d_data))\n",
        "print(d_label)\n",
        "\n",
        "s_data= np.column_stack((samo_length,samo_height))\n",
        "s_label=np.ones(len(s_data))\n",
        "new_data =[[82,40]]\n",
        "\n",
        "dogs = np.concatenate((d_data,s_data))\n",
        "labels = np.concatenate((d_label,s_label))\n",
        "print(labels)\n",
        "\n",
        "dog_classes = {0:'Dachshund',1:'Samoyed'}\n",
        "\n",
        "k=1\n",
        "knn = KNeighborsClassifier(n_neighbors=k)\n",
        "knn.fit(dogs,labels)\n",
        "y_pred=knn.predict(new_data)\n",
        "\n",
        "print('Data',new_data,', Classified',dog_classes[y_pred[0]])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mfc37cpLYPcx"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn import metrics\n",
        "from sklearn.datasets import load_iris\n",
        "import pandas as pd\n",
        "\n",
        "iris = load_iris()\n",
        "print(iris)\n",
        "iris_df = pd.DataFrame(iris.data, columns = iris.feature_names)\n",
        "print(iris_df)\n",
        "iris_df['target'] = pd.Series(iris.target)\n",
        "print(iris_df.head())\n",
        "print(iris_df['target'].value_counts())\n",
        "\n",
        "\n",
        "X=iris_df.iloc[:,:4]\n",
        "y=iris_df.iloc[:,-1]\n",
        "\n",
        "def iris_knn(X,y,k):\n",
        "  X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.3)\n",
        "  knn=KNeighborsClassifier(n_neighbors=k)\n",
        "  knn.fit(X_train,y_train)\n",
        "  y_pred=knn.predict(X_test)\n",
        "  return metrics.accuracy_score(y_test,y_pred)\n",
        "\n",
        "k=3\n",
        "scores = iris_knn(X,y,k)\n",
        "print('k={0:d} --> accuraccy = {1:.3f}'.format(k,scores))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "19fXwJ4LN0Cr"
      },
      "source": [
        "새로운 데이터를 제시해보자"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oGwY1CQyb5jz"
      },
      "source": [
        "from sklearn.datasets import load_iris\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "iris = load_iris()\n",
        "\n",
        "k=3\n",
        "knn = KNeighborsClassifier(n_neighbors = k)\n",
        "knn.fit(iris.data, iris.target)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wbayfWFcOtWW"
      },
      "source": [
        "classes={0:'setosa',1:'versicolr',2:'vriginica'}\n",
        "\n",
        "\n",
        "X=[[4,2,1.3,0.4],\n",
        "   [4,3,3.2,2.2]]\n",
        "y=knn.predict(X)\n",
        "print('{} 특성을 가지는 품종: {}'.format(X[0],classes[y[0]]))\n",
        "print('{} 특성을 가지는 품종: {}'.format(X[1],classes[y[1]]))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C883opbgPths"
      },
      "source": [
        "confusion matrix 만들기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0zFFbyQkP8Nm"
      },
      "source": [
        "import numpy as np"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dSo99UuJPsry"
      },
      "source": [
        "target = np.array([0]*10+[1]*10)\n",
        "target"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZqP2ZsV1QC_2"
      },
      "source": [
        "pred = np.array([0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1])\n",
        "pred"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kDbUiWMHQfBU"
      },
      "source": [
        "\n",
        "\n",
        "TN | FP\n",
        "\n",
        "FN | TP\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b3M65qf7QW2C"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "confusion_matrix(target,pred)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yuzh6CWHQ120"
      },
      "source": [
        "from sklearn.metrics import precision_score, recall_score\n",
        "print('정밀도 :', precision_score(target,pred))\n",
        "print('재현율 :', recall_score(target,pred))\n",
        "\n",
        "from sklearn.metrics import accuracy_score, f1_score\n",
        "print('정확도 :',accuracy_score(target,pred))\n",
        "print('F1 점수 :',f1_score(target,pred))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tCRSHjImR2PZ"
      },
      "source": [
        "k를 아무리 바꿔도 정확도가 올라가지 않다면?\n",
        "모집단에서 sample을 끄집어 내서 train data로 사용을 하는데\n",
        "이떄 sample에서 bias가 있었기 때문이다.\n"
      ]
    }
  ]
}